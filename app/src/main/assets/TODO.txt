
TODO list:

Minimum functionality:
StudyAloneActivity:
- We want the user to specify the building, OPTIONALLY a room (default all), and OPTIONALLY a time (default current time)
- Return: a list of all gaps within the building (and optionally the rooms) available on the current day (or should it be for 24 hours?)
- 1. Building: list of buildings must be generated by a Scala script
- 2. Rooms: List of rooms must also be generated by a Scala script which looks at all courses and sees all building-room pairs they use
- 3. Time: a single picker is fine

AuditCourseActivity:
- We want the user to specify the subject, and the course number
- Return: A list of times when the course is offered (for all sections save online ones) and also the building/room they are in
- We only want to return sections that have not completely passed yet (look at endTime vs curTime)
- 1. Subject: List of subjects must be generated by a Scala script
- 2. Course number: List of courses might also be generated by a Scala script which looks at all courses and sees all subject-course pairs

Issue:
- An immediately noticeable issue is that the lists seem to rely on quick processing of large chunks of data
- The app should thus first go through the entire list of courses for the term (FOR BOTH TYPES OF ACTIVITIES)
 Gets current term: GET /terms/list.{format} current_term
 Gets all courses for term: GET /terms/{term_id}/courses.{format}
 Gets the schedule for each course: GET /courses/{subject}/{catalog_number}/schedule.{format}
 We use this to populate the models for Audit option, and also determine which buildings and rooms are available for the StudyAlone option 

- Place a loading screen, and once done, save the data to a sqlite database, if possible
- MVP: use a selector instead of a dropdown that people can type into
 - next draft: use a selector, but the user must select something for green border, else red border (even if they type it in themselves)

======

StudyAlone:
- Harden results if invalid building or room is chosen, and differentiate between no gaps due to no courses, and no gaps due to too many courses
- Pass the JSON from invalid check along to the next activity, if possible for AuditChooseCourseActivity (Idea: first try using toString)
- Enable option to not input a room, to find gaps in all buildings
- Assign room and building nums to each entry, not as formal parameter, but from json result

- Enable a HashMap cache of constant size (check how much memory app should use, first)
- Load the roomslist file in a background thread and .get only when user starts typing
- Migrate JSON helpers to toolkit, and separate more by DRY

- We need to, using Scala and a cache on the side:
  - Grab every course running for this term GET /terms/{term_id}/courses.{format}
  - For each course, grab its schedule GET /courses/{subject}/{catalog_number}/schedule.{format}
  - We want to make a list of every single building and room that houses at least one course
- We want to link this script so it can be quickly run from command line and exported to the assets folder!
- We also want to make it so that the output is automatically formatted into code!
  
  The rest can be done with GET /buildings/{building}/{room}/courses.{format}
  
/*
  - Place the schedule in a large data structure or database, and then calculate the size to see if it is worth embedding
    - If it is somehow worth embedding, then make an "audit close by" option where user can select a building and then see which courses are showing up soon
      - (Or audit close by should make user specify room number(s))
    - If it is not worth embedding, then extract the gaps into a timelist and feed it as an XML input file to the app
    - Then, from app, extract XML file and filter out gaps that are already over, and filter out gaps 24 hours after the user's current time
    - Sort the remaining gaps by longest time available from current time, and show them
 */

AuditCourseViewResultsActivity:
- Present results ordered by time, and discard results whose start times have already passed current time
- Migrate helpers to auditcoursetoolkit, and separate more by DRY
- It turns out results can vary heavily depending on various fields...thus, custom deserialization should take place separately first...
- The types we need to extract are Bool?, Int?, String?, and Double?

Error screen:
- Present error screen, then option to return home or close app
- can back button be disabled?

Overall:
- Create a cache that stores information by key: String, info: Any, time: Long
 - This is especially important for the subjects list, and somewhat the courses list for auditing courses
 - This is also important for the buildings list, but not the rooms list
 - Allow cache to store/retrieve by type, not necessarily generic

Refactorings to do:
- Strings into res files, and make French and Chinese versions
- Move non-layout methods into their own classes in toolkits
- Add refresh button on result views in case user somehow leaves the app running for that long on the results page
